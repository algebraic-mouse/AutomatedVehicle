#include "sys_pmu.h"
#include "sys_common.h"
#include "system.h"
#include "stdint.h"
#include "os_projdefs.h"
#include "can.h"
#include "esm.h"
#include "sci.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include "sys_core.h"
#include "sys_vim.h"

/* Include FreeRTOS scheduler files */
#include "FreeRTOS.h"
#include "os_task.h"
#include "os_semphr.h"
#include "os_portmacro.h"

/* Include HET header file - types, definitions and function declarations for system driver */
#include "het.h"
#include "gio.h"

/* Define Task Handles */



xTaskHandle CAWarningTaskTcb;

xTaskHandle hillAssistTcb;

static unsigned long  WCET[] = {300000, 300000};
static int   taskCriticality[] = {1, 0};

static int state = 0;
static int caOverrun = 0;
static int haOverrun = 0;
static int count=0;
static uint32_t processorUtilization=0;

int *intvectreg = (int *) 0xFFFFFE70;
int *intindexreg = (int *) 0xFFFFFE00;

#define LOW  		0
#define HIGH 		1
#define DATA_LEN	8

#define LED_TASK 0

#define UART_ABS scilinREG //Tx ABS data
#define UART_STEER sciREG //Tx steering data
#define UART_STACK_SIZE	  ( ( unsigned portSHORT ) 256 )

//#define f_HCLK (float) 180.0 // f in [MHz]; HCLK (depends on device setup)



//uint8_t statsBuffer[40*5]; // Enough space for 5 tasks - this needs to be global, since task stack is too small






void CAWarningTask(void *pvParameters)
{
	//For periodicity
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
	int i =0;

	while(1)
	{
		gioSetPort(hetPORT1, gioGetPort(hetPORT1) ^ 0x80000021);

		for (i = 0; i<10000;i++){
		}

		if(count>1000){
			for (i = 0; i<10000;i++){

			}
		}
		count++;
	//	gioSetPort(hetPORT1, gioGetPort(hetPORT1) ^ 0x80000021);

		vTaskDelayUntil(&xLastWakeTime, 2000); //9ms

	}

}


//Hill Assist  :

void hillAssistTask(void *pvParameters)
{
	//For periodicity
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();

	while(1)
	{

		int i=0;
		int j=0;

	//	for (i = 0; i<100000;i++){
	//		for (j = 0; j<10;j++){

	//		}
//		}

		gioSetPort(hetPORT1, gioGetPort(hetPORT1) ^ 0x2000000);

	//	if(state==0){
		//	vTaskDelayUntil(&xLastWakeTime, 2000); //5ms
	//	}

		if(state==1){
			vTaskDelayUntil(&xLastWakeTime, 20000); //5ms
		}


	}
}



unsigned long getWCET(int index){
	return WCET[index];
}

void runTimeUtilization(uint32_t utilization){
	processorUtilization =  utilization;
}


void stateManager(unsigned long priority, uint32_t runTime){
	if(priority == 3){
		if(runTime > getWCET(0)){
			// Change to safe state;
			changeSystemState(1);
			caOverrun = 1;
		}
	}

	if(priority == 2){
		if(runTime > getWCET(1)){
			// Change to safe state;
			changeSystemState(1);
			haOverrun = 1;
		}
	}

}

void changeSystemState(int value){

	if(value==0){
		state=0;
	}
	else if(value ==1){
		state=1;
	}
}

void initializeProfiler()
{
/* Enable PMU Cycle Counter for Profiling */

_pmuInit_();
_pmuEnableCountersGlobal_();
_pmuResetCycleCounter_();
_pmuStartCounters_(pmuCYCLE_COUNTER);

}

uint32_t getProfilerTimerCount()
{

return _pmuGetCycleCount_();

}


void main(void)
{

	/* Set high end timer GIO port hetPort pin direction to all output */
	gioSetDirection(hetPORT1, 0xFFFFFFFF);

	vimDisableInterrupt(16);

	if (xTaskCreate(CAWarningTask,"CA Task", UART_STACK_SIZE, NULL, 3, &CAWarningTaskTcb) != pdTRUE)
	{
		/* Task could not be created */
		while(1);
	}

//	if (xTaskCreate(hillAssistTask,"hill Assist Task", configMINIMAL_STACK_SIZE, NULL, 2, &hillAssistTcb) != pdTRUE)
//	{
		/* Task could not be created */
//		while(1);
//	}





	vimEnableInterrupt(16, SYS_IRQ);

	/* Start Scheduler */
	vTaskStartScheduler();

	/* Run forever */
	while(1);
	/* USER CODE END */
}
